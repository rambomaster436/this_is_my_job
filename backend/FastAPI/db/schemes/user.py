
#we create a funtion that serve us of utility def user_etc since it gonna represent a user 


def user_scheme(user)->dict: #what reach us is theorically that user of data base so what we put user and what we've that to end returning in here in this line is a dictionary by that we typeamos it we gonna to put for that -> dict: we gonna give back a dictionary that gonna contain the ID etc of down so what it gonna return for that we gonna create a json that coincida with our object of model remembering that we dont have some exactly equal yes we'll have an username an email but the ID wont be ID it'll be _ID then therefore in the json we'll have that to make is a json that has {"_ID": we'll have that to call to user that is what comes of data base user[we'll have that to search inside user a camp that is "_ID" and the ID of 1rst in here will pass to be the ID of our user that is the ID of the user that we've defined in the user file of the folder of models in the rest of the cases is much more simple because the camps it calls exactly equal], "ID": etc equal that the others in there down we could to create an utility that made a transformation more direct but for what we understand the concept we've the username and we make the same that in ID for the username and the email we'll search the camp email in data base then we delete the before that we put the ID etc of lower and with this is an operation that is already capable of to perform a tramsformation of what comes in data base to what is expecting that has our object of model that is user in return we'll have that to make a thing more is what the ID of of first line : user["_ID"] this is an object dont gonna be a string and we want a string remembering that in user file of models all will be strings str so what we've that ensure of what this user that gonna be an object we gonna end it transforming in a string  str(user["_ID"]) this because we know already and we'll see it in data base it is being saving for what we see for what we 're making this transformation to string direct once we've alreay this we go to usersdb that is where we quieted to middles and we gonna see what lacks us what lak is in the part of post operation new_user db_client etc that new user in really was an object of data base that wasnt such which what we wanted give back that was the User of the operation of the post so what we delete all the contained in new_user
    return {"id": str(user["_id"]),
            "username": user["username"],
            "email": user["email"]}
    
#other operation for the scheme of users and we gonna pass it as parameters is a listed of users and what we gonna end returning is is a list  or be we put users_scetc(users)->list this gonna make the same that the operation of up but instead of with one with severals then done this we could already with every one of the users that carry us to return we could to make a for of user in users and with every one of these users in really we could to go calling already this operation user_scheme() or be the of up  this go f1rst before for in and to pass it every one of the user (user)and with all this to go generating a array and we put all between [] of return of this operation is to say with every user that reach us in the listed users we call it with every one of the operation of up and it gonna creating us that json of up of return with every one of em and so we reaprovechamos already that operation that we've in the user file that is not in the scheme folder and we gonna usersdb file to our get operation under users_data-bse = and up of get operation ("/{id}") what we we'd have that to make is to call to users_scheme in the return of that get operation and we put all the operation inside that users_scheme(db_client.etc)
def users_scheme(users) -> list:
    return [user_scheme(user) for user in users]
    
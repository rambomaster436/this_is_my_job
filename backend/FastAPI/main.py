#here goes all what is my server side #fastapi dont gonna install considiring the escritorio no necessarily
#fichero is a file 
#our server is desplegado in http://127.0.0.1:8000 local host
#URL local: http://127.0.0.1:8000
#to connect to the data base we just push in connect button to connect to the data base an we put in the part of up that leave us the next direction mongodb://localhost and with that it'll open the data base or be in the left part the the data base or to make the data base and inside the files remembering that it's a picture of a leaf to its right

#fastapi manage absolutly all related with an api with anyone type that carry calls http #also manage cookies we retreive how parameters inside the own funtion the headers of a request http for to do cookies or header we  just need import cookies or header and inside of the call to the api we can capture to that cooky or header all this to do is in FastAPI documentation in cookie parameters or headers parameters thy're under Extra data type   

from fastapi import FastAPI 

#we import the products from routers folder now we have the fichero of products to get to do the main fichero after now we need import in operations how router
from routers import products, users, jwt_auth_users, basic_auth_users, usersdb #we import here users_db also and we make it also its router for what the only that we've of fastapi in the server running well also it encharge of to expose this api with that we'd be exposing 5 apis differents 

from fastapi.encoders import jsonable_encoder #here we import from fastapi.encoders jsonable _encoders to safe that the datas sent to the server are coded 

#to import static resources we import from fastapi,staticfiles import the class Staticfiles 
from fastapi.staticfiles import StaticFiles #Import this is the only that we need  

#A backend serve for expose this type of operations to work with those different scrudd of writting reading or whatever
#a backend serve also for serve statycs resources how when call to a backend or api and we can access to a picture to a pdf whathever statyc and download we can to do that because that is an api that we can create it in case that to our server we give it the option that expose a statyc resource, fastapi has support for that is easy exposee static resources in fastapi for that we create the folder static/images of this way we have a form of to save the images tha we wanna put an where to do it we make right click and to put in reveal in file explorer and we put the picture and then we run our server in main an we go to the server to see the picture puts in the folder 

#fastAPI accept millions of  parameters is the initial of fastAPI of how it gonna behave our server practicely to the time of to try petitions in the API
app = FastAPI() #FastAPI() is a class 

#the protocolo is what does possible la conmunication in internet a example is http that is a standar 
#Now we have 2 petitions get and we have 2 answers differents

#when we do some with / gonna to return the funtion root()
#with @app we're accessing by end to the context of fastapi with def were not doing 
#this is instansiar fastapi #get form part of the operations that are available in the http conmunication get is all what we do  when go to an explorer and call to a web is a searcher get some what we ask

#routers
#the routers are for what when we run can from an only site our server it gonna wake up all the projects that we created because in each project we've tried make independent in every class a fichero to what didnt mix every thing for what it understand a little better so what remember that we have that to import the 2 routers new from router also that what we wanna import is the files so we must to to put the name of the file 
#Now we import of tje next way the router app.include_router(products) where .include(etc) is an operation and the router is products.router where router is the router what we defined  inside products 
#Now we've included inside the main api one of our routers that is the router of products  now we run our api in thunder to test that it's well and we can to connect with api products  
#what mena that we can import the api products is what we can launch in a only  server the complete project and main encharge itself of expose all router that we've 
app.include_router(products.router) #with this we can connect and import the api products the same we can to do with the rest

#For import users api we must import instead of FastAPI the APIRouter and to change the app by routers in all the operations besides remeber in all FastAPI to change
app.include_router(users.router)#include_router is a funtion that serve for connect or import the others apis and to can run em from here the main file

#once we've these 2 routers almost all would be ready so what we must to run the server from here 
#we connect with the api jwt_auth_users
app.include_router(jwt_auth_users.router)

#we connect with the api basic_auth_users
app.include_router(basic_auth_users.router)

#we connect with the api jwt_etc
app.include_router(usersdb.router) #once having all this we gonna start make things we gonna understand what now where we before had the array data_base_etc from usersdb of lie that served for work with users making the differents opertions to that list ho post that add to taht list a new user 

#for access to resources statics or exposes our directory that has the static resources is the next app
#Besides remember it catched of time in when when we change the static of path of name by another
#now with this operation mount we can acces down load the static resource#also remember the directory is whom call to the static file or convocate it  
app.mount("/static", StaticFiles(directory="static"), name="static") #operation mount serve for ride the this type of resources and for it we need to import form fastapi.staticfiles #mount(need a path for expose all or where gonna expose in our case "/static", the aplication or how is the type of directory that we gonna expose in our case the type is StaticFiles(directory="static") what we imported indicating that the directory is of type static, the name with what we wanna get outside in our case name="static") #And now with this we load our server in the google wiht /static/images/aimage.jpg and remember the image must to be in lower case or minuscule and of this way we can do it with every thing the static resources

#with @app.get("/") we access to the context of fastAPI and also we define our api
#with the of down we get the server
@app.get("/") #one of the operations that has @app is get that says in this case that we can to do get to a place with space

#in get we can operate many operations if one only @app.get("/") this serve only for one if we put more only run te 1
#this might be already a funtion of our API in what we call to our server and it return the funtion root()
#now lack we have that to point where gonna be hearing the calling to our server URL to call and what's the form of to call
#all this operation we have it in bar this is the root of the IP where is deploying our API root is to call to localhost if we call to local it gonna intrepret this operation
async def root(): #with async we become def of a funtion sincrona to a funtion async #ever that we call to a server the operation that it execute have that to be asynchronous
    #it's better  with [] or {} there almost dont do errors in the symbols
    w = "Â¡Whats uppppppp welcome to your web page \:v/ i'm your programer Edison what do you want" #also work with string but someone symbols dont reknow them
    return jsonable_encoder(w)
root()

#fastapi how frame work has integer a server in the cloud  we have the posibility of load a server in local we can do it with uvicorn main:app --reload 
#uvicorn is a dependence that was download with fastapi is a server Fastapi is the name of the root file that we wanna run and the --reload gonna reload the context of the server everytime that we change some in this file
#"here is our server Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)" it,s a diretcion http is a local host anyone machine had certains IP directions and only some work to level local we can also wake it in other IP the local
#in the final we gonna desplegar the local host in URL an IP can don value nothing out of our computer

#this is to do another petition
#we have a fronted it's our web explorer it's what is releasing petitions etc
#when we put ("/") and up there's other we are deploying or desplegando in the same path that up
@app.get("/url") #if we want deploy the rute we use /url and we change the server add at last /url to see our text or funtion
#these data types /url gonna understand very well between the part of the fronted and the part of backend
#if you do differents funtions hasnt sense that the funtions would have the same name

async def url(): #with async we become def of a funtion sincrona to a funtion async #ever that we call to a server the operation that it execute have that to be asynchronous
    #the folio that it can understand very well inside a api is a json that json is series of claves and vaules
    #if we take off https etc gonna have an operation that give bak the url of the course but you wont know to whom call to the server for that we have the documnetation for  to say this is my documentation of my api and that documentation exist a / that is root / url that give back a url and there will be nothing that we didnt put like mouredev

    #when we put /mouredev not only return a Json if no also a http code beacuse the self http code besides of allow us conmunicate us also work with codes like 404 that is a not found in terminal is the petitions that we did the server give back us it and with that also we're going to work drive and can to say take this Json that i dont find the user but we shall to point that what Json says is coherent
    return { "url": "https://mouredev.com/python .lkhukjhytfdrhthukjlkÃ±kÃ±i" } #this is a information a little more complex is of the formats more used to cosumed api is standar in a 95% of the apis gonna be that how work are with json 

#if we put other /mouredev whatever it dont find it and return no only a json if no a code http because the code http allow also work with codes like 404 that is a not found this server also apart of to give us a json gonna give some more how in terminal it is there it is the 404 these answers codes we also gonna can drive em 
#at final we'll have that drive those codes because those codes gives us states of our petitions of some one form like 500 404,the server some onetimes is not capable of to do what we expect
#also we might fo it generate the documentation with a share document but we have tecnologies like  Swagger UI who also is very used since it allow us create a web page that serve us how documentation that let know us all requests tha has api, how we're documenting those requests what's the endpoint etc
#with /docs in our server we create the documentation with Swagger UI of way authomatic

# A JSON es un formato de texto que se usa para el acceso, almacenamiento e intercambio de datos. Es muy fÃ¡cil de leer y escribir para los programadores y sencillo de interpretar y crear para las mÃ¡quinas1. JSON se basa en la sintaxis de JavaScript, pero no es un lenguaje de programaciÃ³n, sino una forma de representar objetos con nombres y valores2. JSON se usa mucho en el diseÃ±o de sitios web y aplicaciones mÃ³viles, ya que permite transferir informaciÃ³n entre diferentes dispositivos de forma rÃ¡pida y eficiente
#we can stop the the server with CTRL+C
#the petitions get are what interprate the explorer by defect a get is to get when we put an url in anyone web explorer we're donig a get

#TO say it to the user how to call to the url or the / we must generate documentation of my api where must see the user that the / is root and the other url that give back us and that theres /mouredev
#the tool most used to create documentation is Swagger UI because it allow us create a web page that work how documentation all the things that goes in documentation that explain all the url all the petitions that has api if it's get some one recomendations advices etc 
#for access to documentation we use /docs in the page of the server together to the server in the link of up it create with swagget UI of way authomatically the documentation we have already documented the api with this only we have to say to the user that go in with the url server/docs for what see all the documentation
#with try out we test that return the web page "curl -X 'GET' \" say us the type of petition that you've done 
#with swagged UI the documentation it create automatically U dont need do nothing we can add more things too, 
#there's other gestor that is not swagged that is /redoc that also is other tool to do documentation of api is more detailed but without results or execution but allow also download the json  with a format Json with all specification of this api
#an api is to put it, document it understand it already ride a standar

#the get petitions are what interpret the eplorer by defect

#In the apis or protocolos httpl doesnt exist only the petitions get this can to see in the documentations 
#when we have petitions that no only are a get from the explorer we wont can lance it because the explorer only in direction bar only accept us and when we want to do a post the explorer wont let us for that we have differents options one of these is postman, postman is a client for to can execute petitions to api
#postman serve for interact with an API with a backend we should to do a petition 
#we if we're working from Visual study code we can install an extemtion from visual study code so we can work all from visual study code

#next step we put the url in get from postman + in here we can save a collection with all the petitions no matter that so complex it be in params inside postman here there's a huge of information the return 200 amount of time consume cookies etc all relationed with an API it gonna give back
#remember FastAPI by defect generate documentation with swagger UI this use it how to test things very puntuals

#shamp is the server that we're using #we can share also the collection#in headers i the server
#there's many petitions that we can do besides get also post put delete patch head OPTIONS PROPFIND CUSTOM justly put in get in postman
#when you build an API path is the petition of separe the intereses and resources also is known how endpoint, rout or ruta in an URL https://example,com/items/foo there then path would be /items/foo that define items how set and foo how subset this wor also in webs in APIS also seemed working with users it'd be /users/products
#the operations following http get etc.
# the petitions has also methods tha we can invoc , get is for obtain read datas
#api for users if we wanna obtain users value a get 
#crude, C create, Read, U update, D delete these almost basic operations all this for users or some with this we can create almost an small api
#to create user we use dfifferent to get cause with get is very large anytimes the database ask a new user or the user change of password for that we have a post for update an user we use putif the user get off of the plataform delete 

#if we update only a date we use path often it update in block that is update "the only that you need to put a post is change the get by the post"
#the update it does many times it change the entity of the object, path'd serve example to change the lastname example

#The security is in Security intro in documentation of FastAPI #all the apps has an api and all ask authentication or security
#The authentification is when you are registered with your datas when you are reognizedor has an account and the authorized is when you are able for some or enable to do some 
#authenticate is when the system know the user that has went in , identify, reknow #authorized is of the up
#the forms that authenticate self are many but what we gonna use must to be standar like passaword  the token also can be part of this the backend once ingresed the users and password return a token to know if you are yourself and you've ingresed beforely and user exist also others more complex and safer like OAuth2 thatis in security intro and is a standar that has an mechanism very concret and very safe what serve to work with authentication between the an client and aserver #OpenID Connect is the base where is rided fastapi is to say that all the what has fastapi or mechanism that gives fastapi in security folllow ann standar are official mechanisms

#we gonna work with differents mechanism of authentication  
# we gonna create inside the routers file a new api or router for the part of the authentication for of that way you continue having what you have already without to touch nothing to anothers apis for what we authenticates to the peoples inside of the system 
#we gonna develop in this file the basic authentication or be by user and password but what by inside gonna work of a way very concret also what to the tiem of to authenticate it gonna work of a way very fix #this api of authentication also work with /users

#we gonna work with data base is some delicated because we must to pass by differents things the first that we must to do here is to know with what data base we gonna work and why today we gonna work with mongodb because is the data base no relational most used of the world there's another data bases relational like my sql etc but anyone relational data base in really form a or work of a different way to a no relational data base because a relational data base contain relations and a no relational data base doesnt contain relations though it can to do some for what contain it its name same says it is almost how to say a relational data base is formed by differents boards the boards has differents registres that it might to relation with an ID imagin you that we would have a board that had users that those users had a listed of programing languages and that the languages had saved only an ID then we'd have other board with all the listed of programing languages and in base to the ID of the user of the prog langu that use we might consult in another board which are those languages by example and we'd have a direct relation and to can join boards to can to do the called queries consults by other side we've the no relational data bases in these to understand fast how they work is basely what we've there are documents with text text of type that we might to say that has format json that we know that we know how work these structurations of datas that has enclaves, values that to the final the only that we've are differents chains of text nested that'll be the what we have in a o relational data base and we'll have 2 big groups to the final what we gonna have certains entities certain documents we say that the data bases is almost how if they divide selves in directories and inside the directories what we end having are a documents that has a text that can end representing datas but of what it try is that work of way enough independient that dont need a relation among em how such what allow that those data bases occupe very little that be fast to the hour of to work with em the things that they make bad are if we true we'd have that to keep relations that'd be a little more complex by that to use a type of relational data base or not all depend of what types of datas and what needings we've of face to model those data bases inside a data base in our case we gonna work with mongo db because 1 it use much 2 because it demand much the to know what is mongo db 3 because the no relational data bases are much more actuals than the relationals data bases and because in the example that we gonna mount has more sense to use a no relational data base that the other the concept of to end mounting a data base to work with it is very seemed and who says with mongo db and with another no relationals data bases or who says with by sql says with others relationals data bases so what of the what it try is to understand that concept more of than we get leave experts in mongo db because it doesnt gonna be so a data base has all a study and can carry us much time to end understanding it but what we gonna try more or less is to answer how we've that to face up by first time to the concept of data base in a backend so what we gonna go by 
# it might to need both type of data bases in a big project and no only both is to say both type of d b equal in projects big we've 4 types of relationals d bases and 3 types no relationals or whatever because there's many sysstems is to say to work in a project with a sql server a my sql a oracle a mongo db and a fire base in big project is not strange because each data is modelling of the way in what it believe that to work better in our case we gonna go to the simple but of what it try is to understand 
#mongo DB has much conmunity, documentation you gonna find of all now mongo DB is doing much pudh basely you gonna go in to the page of mongo DB and the what it gonna says is Mongo DB Atlas that is basely what it are efforting now much in mongo DB is that a data base has that to be of course in a remote server if we wanna consume it now same we're working all local but when a project is in production equal that the backend is in a remote server for what a application web for a mobile aplication for what an of escritory can it to conssume well exactly pass with a data base also is in a remote data base what is mongo DB Atlas is the service to the final that has the people of mongo DB for alojar in their system the data bases mongo is to say how all a suite that allow us to drive mongo DB to level of infraestructure because untill we gonna can to choose if this infraestruture of mongo DB Atlas we wanna install it in google cloud we wanna install it in Amazon ows where be but all we gonna make it say from the owns tools of mongo so what what you'll see in every sides is what now what they want is what we create selves a data base in remote to start already to work we gonna make it all in local because we wanna see how it gets run a service also of data base in local to what we see how it install it to what we see how it work and if we make it in remote if is the 1rst time that we see this it can to seem enough easy but in really we dont gonna understand so well we can to taste mongo DB Atlas there's a green button big in the part left and we push it to taste it of way free to taste it we put Mongo DB atlas in google and we push in MongoDB Atlas DataBase - The Cloud-etc and we're already in th page in mongo DB and we must the of before or be to push the button under Harness the power and when we push it the button we're tasting the Mongo DB Atlas and appear us to register of way free we can to create a free instance is not no of payment no nothing is to say to do our tests even to certains projects you can to use a mongo DB Atlas without no one problem in our case we gonna install mongo DB in local mongo DB run in linux, Mac, windows so what in that case there's no problem basely where must to go is to the part of mongo DB and after to the part of downloads basely is https://ww.mongodb.com/try/downlad and there we'll have differents things in the part left that are in green like MongoDB Atlas, MongoDB Conmunity Edition, we've for download some one things, we've the own mongoDB Atlas that this if we've us that to login but we've some called MongoDB Conmunity Server Download in the MonDB Con Edition is how the free vertion of Mongo DB that we can to download without no one problem and that can to install in the machine simply we select inside of this M.C.Server we put in under version the most actual in this case i believe 6.0.3 in platform our platform and the package in these we put what we want and we put in the Download last but before for what appear the selections we push the button select package in green the goof is that this selections it puts in authomatic so what appear already you the selections of your laptop and when appear you after of to push download gonna appear a white square and we put allow equal that we might to download also there's some one things like cubernet there's a huge of things also we've certains tools in the left equal that the other like Mon. Shell, a client Atlas CLI etc maybe can that does us lack the tools and when we put the Tools in the left appear MongoDB Command Line Database Tools Download and we push it the options under MongoDB Command Line Database Tools Download we gonna see in the part of platform for what be for my laptop that is windows or be all of windows start with windows in this case we put Window x64 86_64 but there's documentation for any one operative system in what we're working and we download it like ever and we open it and what we'll have is directly an executable this downloaded depend of the system operative in what we're working but almost all are some seemed all this is very easy because to get the extrutions of instalation for all the operatives systems is more that enough and it understand perfectly and if no there's many tutorials that gonna explain you then we gonna see the downloaded and inside there'll be a ficheros that are licenses and a bin and in this in really we gonna find differents tools this the only that we must to do is this bin we've that to colocate in a directory that we know in our computer remember that we open the downloaded mongosh-1etc the in the folders of the computer if we wanna canto do a new folder for this tools files or be we pass all to the instance de mongo folder old  and i where we want depending of the oper. syst. we're working all the executables that we've on bin we pass it of our computer to a directory where we want in this case to the to the side of where was old equal that we've this also we've the tools that can to do us lack in keep on what cases then we have the tools in mongodb-database-tools bin and we put it inside of the other join to old in mongo DB to the final all this of bin mon DB dont let of to be tools that we can to use from mongoDB once we've this what we'll have that to do is to check out step by step in what operative system equal also in what version we're this'll depend a little of where you're we go to the general documentation https://www.mongodb.com/docs/manual/administration/install-conmunity/ and we push the button to go to doumentation and left MongoDB Database Manual and there will appear the Install MongoDB Conmunity Edition this the general documentation of the version conmunity that is what we're using the free version and there ther's to install to differents O Syste. and very well explained like linux and there it says basely we can to install it even untill from homebrew we might to do from conmands lines we install it and to run wouldnt pass neither nothing it'd download us all these executables themselve would colocate in a directory very concretmand it says us taht to do with em to do it is better is better to search how to install mongo Db in local the version conmunity in tutorials when we put in left Install on windows appear some that speak us about directories, about what we can to execute some one comand to test that all is rightly if we're doing it handly even is saying look the directories that equal you've that to create well create you a directory by example for logs how you've that to end running all this the important by example in Mac what you've that to do is that how you've created a directory and you've it put in all those ficheros to the final what you've've that to do is to end the called exporting that directory to what in really when we come to iTerm in the lupa of down and open the terminal ended writing some one comand of some one of the executables of the folder mon. join to the old that in our case gonna be Mon. D in there to the final is the demond or the service of the data base simply that find it if no it doesnt gonna find it if no we that write there and what we try of to execute any one thing of this it doesnt gonna work us basely then once exported the directory already the next in the moment that we're already capables of to use mongo from our machine the next would be to get run it the way that we get run it is with mongo D is the way in the before of google in left under Install on windows in the part of Install using msiexec.exe an and in this we go to the part of under Run mongof with command.parameters where it says /usr/local/var with this is the form of to start the process that gonna wake up a data base in our machine so of easy then we gonna CMD in the lupa of down and we opwn and we put mongod and we must to indicate it where we wanna install mongod by that we copy the msiexec.exe /l*v mdbinstall.log  /qb /i mongodb-windows-x86_64-6.0-signed.msi of under R by example Run mongod with command-line etc and we indicate where we wanna install mongod by example to the side of bin where we created all or be the old etc then we gonna create a folder that is data because here is where we wanna save the data base that data is a data base local when we'd be in a server good 
#for install mongo db  we put in google mongodb download and we push the link MongoDB Conmunity Download from this page we gonna can download the version conmunity here there's severals versions like the Enterprise server that appear 1rst in the part of up in products in Data Base- Conmunity Edition we gonna choose the M. Con. Server to the right gonna appear us the versions and what appear ussually is the stable or be the current down go the platform and slower the package that in this case we gonna choose the msi instalation file and we download it down once it's downloaded we gonna execute it with double click and gonna appear us a instalation screen and we click the next after the I accept after the next after we choose between complete intalation or optimized there's no much difference the only is what it allow to choose the element but the complete install you all so what we choosed the complete next we've 2 options 1 we can install it as a service that mean that every time that we get run the machine gonna wake up the service and it gonna consume you resources then if our machine is not a server mongoDB dedicated or if is not necessary that you're executing mongoDB all the days is recomendable not install it as a service or be dont click the Install Mon. as a Service of that way you gonna can it execute every time that you use it then we take off the click of Insta. Mon as a Service but if it stay as a service of any one way the rute where it gonna install is in Log Directory: of down in that folder it gonna install it and the name appear in Service Name and you might to indicate the type of user what you want but in this case we take off the well of Install M... and we click next then dont quiet as service and after it allow you if you wanna install or not the Mon. Compass that is a graphic interphase of user what gonna you allow manipulate your data bases in mon. if you dont install it of all ways you've the option of to make this through sentences in the console of mon. but yes is of big help so what is recomendable install it after double click next that is down and after finish 

#we gonna a extencion in the squares of the left to search the extension mongodb if we're in visual studio code if no there's a lot of tools that allow us to connect selves for visualize easier what is a data base but the people of mongodb has an official then we can to install the MongoDB for VS Code and that gonna to ender us to put in a icon down to the left we put in the leaf and this what mean is what we gonna already  to can to connect to some one data base by deffect perfectly we've it told where we want that it gets run the data base and it ended it's not done nothing more that wanna say 

#libreria 

#the leaf that it open when we open the mongod file is our data base process running 
#remember in mongodb you to run the data base of this you just need open the file inside mongoDB/server/6.0/bin an open the file mongod also we must to install in the extention of mongodb and we push the button install after we gonna to the part of downt in the leaf and we push it and if it doesnt open nothingn we push in the buton of the square of down and will appear the connect and we push it and will appear for put the direction of the server that is in the own mongoDBCompass that is in our case, with this we say it that it gets run our data base in local but with the before we said it where we want that gets run the data base and that's all it's not done nothing more that wanna say that the data base gonna gets run in local local host by that we put in the leaf and in the part left in connections we put + and we make a new connection pressing in connect to data base and in the part that leave when we put connect in mongodb and we put it mongodb://localhost,in this will appear other connection to other server with other components seemed. and we run it we theorically in there we're already connected and we romevethe connection that before was there rigt click and rmove con. the new connection done mean that we connected already to our data baseif we want to connect to a remote server or whatever there would not be a no one problem we'd have that to put the url the puerto where was that was our data base and it's already adn we see what is in the connections the localhost and we see that seem that in our local data base we've some called admin that it create by defect some called configu. and some that is local basely this local is our data base local and here is we gonna can to start to store datas so what we gonna understand things, we've connected already to the server and we see what is inside of it and we see that there's schemes in local also documents inside startup_log we'l understand that ther's indie of our data base opened, mongodb is a data base no relational but by the moment this is not linked with our backend no we can to access no nothing to can to make a connection to data base we must to install a module inside our instance of python for that we stop our backend with ctrl + c if we've an virtutal environment inside that virtua. envire. if we've it to global level whatever basely what we've that to make is to install a module called py mongo it's a library is a utility that gonna allow us perform the necessary logic to can to connect to a data base to write datas to read em whateverffor install it we can to use our gestor of packages called pip install ,also it can to localisate there's utilities for dockerisate fastapi and mongo without problem, and we write pymongo and we wait to what it install once installed ,we know that that installed is a module that of some one way that we'll can already to use from our own application so what we gonna start to understand how we've that to start to work with a data base and we gonna close all the others process that appear up with the x we gonna let of side of moment the data base the connection that we'd in the left and we gonna understand what mean this of to connect to a data base from our project we gonna come back to run our project in the main or be the main file once wake up our service and we gonna start to create things the 1rst we gonna create in the folder FastAPI a directory called db or be a folder because we gonna put there the things of data base and we gonna create what initially gonna be the client that gonna allow us to connect to the data base so what inside db folder we might to create a fichero called client.py whatever so what we create it this fichero client.py gonna be the encharged of gestion the connection to our data base with mongodb the way of to connect to mongodb so what we must to install a new module or the downloaded alrady pymongo #with this we can to connect to some one data base dy defect